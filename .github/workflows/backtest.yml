name: Daily Backtest

on:
  schedule:
    # 毎日06:30に実行（JST時間、UTC時間は21:30前日）
    # データ取得の30分後に実行
    - cron: '30 21 * * *'
  workflow_dispatch:
    inputs:
      backtest_mode:
        description: 'バックテストモードを選択'
        required: true
        default: 'latest_seed'
        type: choice
        options:
          - 'latest_seed'
          - 'new_seed'
          - 'random_seed'
          - 'cache_only'
      strategy:
        description: '実行する戦略（空白で全戦略）'
        required: false
        type: string
      num_runs:
        description: '実行回数'
        required: false
        default: '3'
        type: string
  push:
    branches: [ main ]
    paths:
      - 'main_parallel.py'
      - 'backtest_engine.py'
      - 'report_generator.py'
      - 'config.py'

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  backtest:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        # キャッシュディレクトリも含めてチェックアウト
        fetch-depth: 0
        # プッシュ権限を有効化
        token: ${{ secrets.GITHUB_TOKEN }}
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Create directories
      run: |
        mkdir -p cache
        mkdir -p logs
        mkdir -p results
        mkdir -p reports
        
    - name: Run backtest based on mode
      run: |
        # バックテストモードに応じてコマンドを決定
        MODE="${{ github.event.inputs.backtest_mode || 'latest_seed' }}"
        STRATEGY="${{ github.event.inputs.strategy || '' }}"
        RUNS="${{ github.event.inputs.num_runs || '3' }}"
        
        echo "バックテストモード: $MODE"
        echo "戦略: ${STRATEGY:-'全戦略'}"
        echo "実行回数: $RUNS"
        
        case "$MODE" in
          "latest_seed")
            echo "最新シード値を使用してバックテスト実行"
            if [ -n "$STRATEGY" ]; then
              python main_parallel.py --use-seed-mapping --use-latest-seed --strategy "$STRATEGY" --num-runs "$RUNS"
            else
              python main_parallel.py --use-seed-mapping --use-latest-seed --num-runs "$RUNS"
            fi
            ;;
          "new_seed")
            echo "新しいシード値を生成してバックテスト実行"
            if [ -n "$STRATEGY" ]; then
              python main_parallel.py --random-seed --save-random-seed --strategy "$STRATEGY" --num-runs "$RUNS"
            else
              python main_parallel.py --random-seed --save-random-seed --num-runs "$RUNS"
            fi
            ;;
          "random_seed")
            echo "ランダムシード値でバックテスト実行（保存なし）"
            if [ -n "$STRATEGY" ]; then
              python main_parallel.py --random-seed --strategy "$STRATEGY" --num-runs "$RUNS"
            else
              python main_parallel.py --random-seed --num-runs "$RUNS"
            fi
            ;;
          "cache_only")
            echo "キャッシュ専用バックテスト実行"
            if [ -n "$STRATEGY" ]; then
              python main_parallel.py --cache-only --strategy "$STRATEGY" --num-runs "$RUNS" --base-seed 42
            else
              python main_parallel.py --cache-only --num-runs "$RUNS" --base-seed 42
            fi
            ;;
          *)
            echo "未知のモード: $MODE、デフォルトの最新シード値モードで実行"
            python main_parallel.py --use-seed-mapping --use-latest-seed --num-runs "$RUNS"
            ;;
        esac
        
    - name: Commit and push results
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # 生成されたファイルの状態を確認
        git status
        
        # 未ステージの変更があるかチェック
        if ! git diff --quiet || ! git diff --cached --quiet; then
          # 変更があれば一時的にステージングしてコミット
          git add reports/
          git add -f logs/
          git add -f results/
          git commit -m "Temporary commit for rebase"
        fi
        
        # 最新の変更を取得
        git pull --rebase
        
        # バックテストで生成されたファイルを最終コミット用にステージング
        git add reports/
        git add -f logs/
        git add -f results/
        
        # 最終コミット（必ず実行）
        git commit --amend -m "Daily backtest results $(TZ='Asia/Tokyo' date +'%Y-%m-%d %H:%M:%S JST')"
        git push --force-with-lease